1. Upload busstops.json data into HDFS directory. Then create hive external table to fetch data using JsonSerDe.
    ```
    {"_id":{"$oid":"5a0720b478597fc11004d951"},"stop":"Non-BRTS","code":"103B-D-04","seq":4.0,"stage":1.0,"name":"Aranyeshwar Corner","location":{"type":"Point","coordinates":[73.857675,18.486381]}}
    ```
    ``` 
    location STRUCT<type:STRING, coordinates:ARRAY<DOUBLE>>
    ```
    ```
    When column-name have special charatcters like _ or $, they should be encapsulated in `back-quotes`.
    ```


> hadoop fs -mkdir /user/hadoop
>hadoop fs -put /home/sharansh/Desktop/DBDA/BigData/data/bus.json /user/hadoop

create external table bus_stops_(
`_id` struct<`$oid`:string>,
stop string,
code string,
seq double,
stage double,
name string,
location struct<type:string,coordinates:array<double>>
)
ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe'
STORED AS TEXTFILE
LOCATION '/user/hadoop/'

2. Execute following queries on MySQL emp database using Recursive CTEs (not supported in Hive 3.x).
    1. Find years in range 1975 to 1985, where no emps were hired.
    
with recursive seq as(
(select 1975 as n)
union
(select n+1 from seq
where n<1985)
)
select n year from seq where n not in (select distinct year(hire)
from emp); 

+------+
| year |
+------+
| 1975 |
| 1976 |
| 1977 |
| 1978 |
| 1979 |
| 1984 |
| 1985 |
+------+
7 rows in set (0.01 sec)

    
    2. Display emps with their level in emp hierarchy. Level employee is Level of his manager + 1.
    
    with recursive seq as(
    (select empno,ename,mgr,1 as level from emp where mgr is null)
    union
    (select e.empno,e.ename,e.mgr,level+1
    from emp e
    join seq s on s.empno=e.mgr 
    )    
    )
    select * from seq;
    
    +-------+--------+------+-------+
| empno | ename  | mgr  | level |
+-------+--------+------+-------+
|  7839 | KING   | NULL |     1 |
|  7566 | JONES  | 7839 |     2 |
|  7698 | BLAKE  | 7839 |     2 |
|  7782 | CLARK  | 7839 |     2 |
|  7499 | ALLEN  | 7698 |     3 |
|  7521 | WARD   | 7698 |     3 |
|  7654 | MARTIN | 7698 |     3 |
|  7788 | SCOTT  | 7566 |     3 |
|  7844 | TURNER | 7698 |     3 |
|  7900 | JAMES  | 7698 |     3 |
|  7902 | FORD   | 7566 |     3 |
|  7934 | MILLER | 7782 |     3 |
|  7369 | SMITH  | 7902 |     4 |
|  7876 | ADAMS  | 7788 |     4 |
+-------+--------+------+-------+
14 rows in set (0.00 sec)

    with recursive seq as(
    (select empno,mgr,1 as level from emp where mgr is null)
    union
    (select e.empno,e.mgr,level+1
    from emp e
    join seq s on s.empno=e.mgr 
    )    
    )
    select * from seq;
    
    
    3. Create a "newemp" table with foreign constraints enabled for "mgr" column. Also enable DELETE ON CASCADE for the same. Insert data into the table from emp table. Hint: You need to insert data levelwise to avoid FK constraint error.
    
-> for this first we have to modify the table of emp as it is not having any  key in the emp table.
    
    CREATE TABLE emp(empno INT(4) primary key, ename VARCHAR(40) not null, job VARCHAR(40), mgr INT(4), hire DATE, sal DECIMAL(8,2), comm DECIMAL(8,2), deptno INT(4));

INSERT INTO emp VALUES (7369,'SMITH','CLERK',7902,'1980-12-17',800.00,NULL,20);
INSERT INTO emp VALUES (7499,'ALLEN','SALESMAN',7698,'1981-02-20',1600.00,300.00,30);
INSERT INTO emp VALUES (7521,'WARD','SALESMAN',7698,'1981-02-22',1250.00,500.00,30);
INSERT INTO emp VALUES (7566,'JONES','MANAGER',7839,'1981-04-02',2975.00,NULL,20);
INSERT INTO emp VALUES (7654,'MARTIN','SALESMAN',7698,'1981-09-28',1250.00,1400.00,30);
INSERT INTO emp VALUES (7698,'BLAKE','MANAGER',7839,'1981-05-01',2850.00,NULL,30);
INSERT INTO emp VALUES (7782,'CLARK','MANAGER',7839,'1981-06-09',2450.00,NULL,10);
INSERT INTO emp VALUES (7788,'SCOTT','ANALYST',7566,'1982-12-09',3000.00,NULL,20);
INSERT INTO emp VALUES (7839,'KING','PRESIDENT',NULL,'1981-11-17',5000.00,NULL,10);
INSERT INTO emp VALUES (7844,'TURNER','SALESMAN',7698,'1981-09-08',1500.00,0.00,30);
INSERT INTO emp VALUES (7876,'ADAMS','CLERK',7788,'1983-01-12',1100.00,NULL,20);
INSERT INTO emp VALUES (7900,'JAMES','CLERK',7698,'1981-12-03',950.00,NULL,30);
INSERT INTO emp VALUES (7902,'FORD','ANALYST',7566,'1981-12-03',3000.00,NULL,20);
INSERT INTO emp VALUES (7934,'MILLER','CLERK',7782,'1982-01-23',1300.00,NULL,10);

     create table newemp(
     empno int,
     ename varchar(40),
     job varchar(40),
     mgr int,
     hire date,
     sal double,
     comm double,
     deptno int,
     primary key(empno),
     foreign key(mgr) references emp(empno) on delete cascade
     );
     
     
     insert into newemp
     select empno,ename,job,mgr,hire,sal,comm,deptno
     from emp ;
     
    
    4. From "newemp" table, delete employee KING. What is result?
    
    mysql> select * from newemp;
+-------+--------+----------+------+------------+------+------+--------+
| empno | ename  | job      | mgr  | hire       | sal  | comm | deptno |
+-------+--------+----------+------+------------+------+------+--------+
|  7369 | SMITH  | CLERK    | 7902 | 1980-12-17 |  800 | NULL |     20 |
|  7499 | ALLEN  | SALESMAN | 7698 | 1981-02-20 | 1600 |  300 |     30 |
|  7521 | WARD   | SALESMAN | 7698 | 1981-02-22 | 1250 |  500 |     30 |
|  7566 | JONES  | MANAGER  | 7839 | 1981-04-02 | 2975 | NULL |     20 |
|  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250 | 1400 |     30 |
|  7698 | BLAKE  | MANAGER  | 7839 | 1981-05-01 | 2850 | NULL |     30 |
|  7782 | CLARK  | MANAGER  | 7839 | 1981-06-09 | 2450 | NULL |     10 |
|  7788 | SCOTT  | ANALYST  | 7566 | 1982-12-09 | 3000 | NULL |     20 |
|  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500 |    0 |     30 |
|  7876 | ADAMS  | CLERK    | 7788 | 1983-01-12 | 1100 | NULL |     20 |
|  7900 | JAMES  | CLERK    | 7698 | 1981-12-03 |  950 | NULL |     30 |
|  7902 | FORD   | ANALYST  | 7566 | 1981-12-03 | 3000 | NULL |     20 |
|  7934 | MILLER | CLERK    | 7782 | 1982-01-23 | 1300 | NULL |     10 |
+-------+--------+----------+------+------------+------+------+--------+
13 rows in set (0.00 sec)




3. Load Fire data into Hive in a staging table "fire_staging".

->done



4. Implement Movie recommendation system.
    * Example Input Data
        ```
        userId,movieId,rating,rtime
        17,70,3,0
        35,21,1,0
        49,19,2,0
        49,21,1,0
        49,70,4,0
        87,19,1,0
        87,21,2,0
        98,19,2,0
        ```
    * Create pairs of movies rated by same user.
        ```
        userId,movie1,rating1,movie2,rating2
        49,21,1.0,70,4.0
        49,19,2.0,21,1.0
        49,19,2.0,70,4.0
        87,19,1.0,21,2.0
        ```
    * Create correlation table.
        ```
        movie1,movie2,cnt,cor
        19,21,2,-1.0
        19,70,1,0.0
        21,70,1,0.0
        ```


create table test(
uid int,
mid int ,
rating double,
time_ int
)
row format delimited
fields terminated by ','
stored as textfile;


create view movie_view as 
select m.uid,m.mid movie1,m.rating rating1,n.mid movie2,n.rating rating2
from test m
join test n on m.uid=n.uid and m.mid<n.mid
;

create materialized view corr_movies as
select movie1,movie2,count(rating1) cnt,round(corr(rating1,rating2))cor from movie_view
group by movie1,movie2
having corr(rating1,rating2) is not null
;

select movie1,movie2 from corr_movies where cnt >1 and cor>0.4;

>hadoop fs -mkdir -p /user/movie
>hadoop fs -put /home/sharansh/Desktop/DBDA/BigData/data/movies/ratings.csv /user/movie


create table real_test(
uid int,
mid int ,
rating double,
time_ int
)
row format delimited
fields terminated by ','
stored as orc
location '/user/movie/';


create external table orc_test(
uid int,
mid int ,
rating double,
time_ int
)
stored as orc;

insert into table orc_test
select * from real_test;






    * Predict Similar movies for given movie Id. Get the recommended movies titles from movies table.
    * Hints
        * Start with above small data tables to test accuracy of the steps.
        * You will need to create new intermediate tables to store results of earlier queries.
        * For main data use ORC format to speed-up the queries.
        * You may need to change reducer tasks memory for quicker execution and avoid OutOfMemory errors.
            * SET mapreduce.reduce.memory.mb = 4096;
            * SET mapreduce.reduce.java.opts = -Xmx4096m;
    * Input movie id in Python/Java application and show related 5 movies.
