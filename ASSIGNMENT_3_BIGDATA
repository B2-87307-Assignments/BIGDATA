1. Calculate hottest and coolest month from ncdc data.// IN THIS QUES CONSIDER WHEN QUALITY=0,1,2,4,5,9 THEN THE DATA IS CORRECT
AND IF TEMP IS 9999 THEN TEMP IS INCORRECT.

CREATE TABLE ncdc_staging (
yr SMALLINT,
temp SMALLINT,
quality TINYINT
)
ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'
WITH SERDEPROPERTIES (
  'input.regex' = '^.{15}([0-9]{4}).{68}([-\+][0-9]{4})([0-9]).*$'
)
STORED AS TEXTFILE;


create table ncdc_month(
mon smallint,
temp smallint,
quality tinyint
)
ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'
WITH SERDEPROPERTIES (
  'input.regex' = '^.{19}([0-9]{2}).{66}([-\+][0-9]{4})([0-9]).*$'
)
stored as textfile;

load data local inpath '/home/sharansh/Desktop/DBDA/BigData/data/ncdc'
into table ncdc_month;

select * from ncdc_month where temp!=9999
and quality in (0,1,2,4,5,9) limit 10;


>(select 'COOL' label,mon,avg(temp) avg_temp from ncdc_month 
group by mon
order by avg_temp asc
limit 1)
UNION
(select 'HOT' label,mon,avg(temp) avg_temp from ncdc_month
group by mon
order by avg_temp desc
limit 1
);


+------------+----------+---------------------+
| _u1.label  | _u1.mon  |    _u1.avg_temp     |
+------------+----------+---------------------+
| COOL       | 2        | -73.34735132208284  |
| HOT        | 6        | 169.3677819293478   |
+------------+----------+---------------------+


2. Execute following queries on "emp" and "dept" dataset.
    1. Create table "emp_staging" and load data from emp.csv in it.

>drop table if exists emp_staging;    
>create table emp_staging(
eid int,
ename string,
job string,
mgr int,
hire date,
sal double,
comm double,
deptno int
)
row format delimited
fields terminated by ','
stored as textfile;

>load data local inpath '/home/sharansh/Desktop/DBDA/BigData/data/emp.csv'
into table emp_staging; 
     
    2. Create table "dept_staging" and load data from dept.csv in it.

>drop table if exists dept_staging;    
>create table dept_staging(
deptno int,
deptname string,
deptcity string
)
row format delimited
fields terminated by ','
stored as textfile;

>load data local inpath '/home/sharansh/Desktop/DBDA/BigData/data/dept.csv'
into table dept_staging;
    
    3. Display dept name and number of emps in each dept.
    
    select d.deptname,count(ename)cnt,d.deptno
    from dept_staging d
    join emp_staging e using(deptno)
    group by d.deptname,d.deptno;
    
+-------------+------+-----------+
| d.deptname  | cnt  | d.deptno  |
+-------------+------+-----------+
| ACCOUNTING  | 3    | 10        |
| RESEARCH    | 5    | 20        |
| SALES       | 6    | 30        |
+-------------+------+-----------+

    
    
    4. Display emp name and his dept name.
    
    select e.ename,d.deptname 
    from emp_staging e
    join dept_staging d using(deptno);
    
+----------+-------------+
| e.ename  | d.deptname  |
+----------+-------------+
| SMITH    | RESEARCH    |
| ALLEN    | SALES       |
| WARD     | SALES       |
| JONES    | RESEARCH    |
| MARTIN   | SALES       |
| BLAKE    | SALES       |
| CLARK    | ACCOUNTING  |
| SCOTT    | RESEARCH    |
| KING     | ACCOUNTING  |
| TURNER   | SALES       |
| ADAMS    | RESEARCH    |
| JAMES    | SALES       |
| FORD     | RESEARCH    |
| MILLER   | ACCOUNTING  |
+----------+-------------+

    
    
    5. Display all emps (name, job, deptno) with their manager (name, job, deptno), who are not in their department.(SEE THIS)
    

>  select m.ename emp_name,m.job job_name,m.deptno dept_name,n.ename mgr_name
from emp m 
join emp n on m.mgr=n.empno and m.deptno!=n.deptno;


+-----------+-----------+------------+-----------+
| emp_name  | job_name  | dept_name  | mgr_name  |
+-----------+-----------+------------+-----------+
| JONES     | MANAGER   | 20         | KING      |
| BLAKE     | MANAGER   | 30         | KING      |
+-----------+-----------+------------+-----------+

    
   
    6. Display all manager names with list of all dept names (where they can work).
    
select ename,deptno from emp_staging where eid in (select mgr from emp_staging);    

+--------+---------+
| ename  | deptno  |
+--------+---------+
| JONES  | 20      |
| BLAKE  | 30      |
| CLARK  | 10      |
| SCOTT  | 20      |
| KING   | 10      |
| FORD   | 20      |
+--------+---------+

    8. Display job-wise total salary along with total salary of all employees.
    

with t1 as (
select job,if(comm is null,sal,sal+comm) total_sal from emp_staging)
select if(grouping(job)=1,'TOTAL',job)job,sum(total_sal) from t1 group by job  with rollup;

+------------+----------+
|    job     |   _c1    |
+------------+----------+
| TOTAL      | 31225.0  |
| ANALYST    | 6000.0   |
| CLERK      | 4150.0   |
| MANAGER    | 8275.0   |
| PRESIDENT  | 5000.0   |
| SALESMAN   | 7800.0   |
+------------+----------+


    9. Display dept-wise total salary along with total salary of all employees.
    
    
with t1 as (
select deptno,if(comm is null,sal,sal+comm)total_sal 
from emp_staging
)
select if(grouping(deptno)=1,'TOTAL',deptno)deptno,sum(total_sal)
from t1 group by deptno with rollup;

+---------+----------+
| deptno  |   _c1    |
+---------+----------+
| TOTAL   | 31225.0  |
| 10      | 8750.0   |
| 20      | 10875.0  |
| 30      | 11600.0  |
+---------+----------+


    10. Display per dept job-wise total salary along with total salary of all employees.

with t1 as (    
select job,deptno,if(comm is null,sal,sal+comm)total_sal from emp_staging)
select if(grouping(job)=1,'GRAND TOTAL',job)job,
if(grouping(deptno)=1,'jobwise_dept_total',deptno)deptno,
sum(total_sal) from t1
group by job,deptno with rollup
;   

+--------------+---------------------+----------+
|     job      |       deptno        |   _c2    |
+--------------+---------------------+----------+
| GRAND TOTAL  | jobwise_dept_total  | 31225.0  |
| ANALYST      | jobwise_dept_total  | 6000.0   |
| ANALYST      | 20                  | 6000.0   |
| CLERK        | jobwise_dept_total  | 4150.0   |
| CLERK        | 10                  | 1300.0   |
| CLERK        | 20                  | 1900.0   |
| CLERK        | 30                  | 950.0    |
| MANAGER      | jobwise_dept_total  | 8275.0   |
| MANAGER      | 10                  | 2450.0   |
| MANAGER      | 20                  | 2975.0   |
| MANAGER      | 30                  | 2850.0   |
| PRESIDENT    | jobwise_dept_total  | 5000.0   |
| PRESIDENT    | 10                  | 5000.0   |
| SALESMAN     | jobwise_dept_total  | 7800.0   |
| SALESMAN     | 30                  | 7800.0   |
+--------------+---------------------+----------+


    11. Display number of employees recruited per year in descending order of employee count.
    
    select year(hire) yr,count(eid) cnt from emp_staging
    group by year(hire) order by cnt desc ;
    
+-------+------+
|  yr   | cnt  |
+-------+------+
| 1983  | 1    |
| 1980  | 1    |
| 1982  | 2    |
| 1981  | 10   |
+-------+------+

    
    12. Display unique job roles who gets commission.
    
    select distinct job from emp_staging where comm is not null;
    
+-----------+
|    job    |
+-----------+
| SALESMAN  |
+-----------+

    
    13. Display dept name in which there is no employee (using sub-query).
    
    select distinct deptname from dept_staging where deptno not in
    (select distinct deptno from emp_staging);
    
+-------------+
|  deptname   |
+-------------+
| OPERATIONS  |
+-------------+
    
    14. Display emp-name, dept-name, salary, total salary of that dept (using sub-query).(SEE THIS)
    
    mysql>     with t1 as (
    ->     select e.deptno deptno_,d.dname dname_,sum(sal) total_sal
    ->     from emp e
    ->     join dept d on e.deptno=d.deptno
    ->     group by e.deptno,d.dname
    ->     )select e.ename,t1.deptno_,t1.dname_,e.sal,t1.total_sal from emp e join t1 on e.deptno=t1.deptno_;
+--------+---------+------------+---------+-----------+
| ename  | deptno_ | dname_     | sal     | total_sal |
+--------+---------+------------+---------+-----------+
| SMITH  |      20 | RESEARCH   |  800.00 |  10875.00 |
| ALLEN  |      30 | SALES      | 1600.00 |   9400.00 |
| WARD   |      30 | SALES      | 1250.00 |   9400.00 |
| JONES  |      20 | RESEARCH   | 2975.00 |  10875.00 |
| MARTIN |      30 | SALES      | 1250.00 |   9400.00 |
| BLAKE  |      30 | SALES      | 2850.00 |   9400.00 |
| CLARK  |      10 | ACCOUNTING | 2450.00 |   8750.00 |
| SCOTT  |      20 | RESEARCH   | 3000.00 |  10875.00 |
| KING   |      10 | ACCOUNTING | 5000.00 |   8750.00 |
| TURNER |      30 | SALES      | 1500.00 |   9400.00 |
| ADAMS  |      20 | RESEARCH   | 1100.00 |  10875.00 |
| JAMES  |      30 | SALES      |  950.00 |   9400.00 |
| FORD   |      20 | RESEARCH   | 3000.00 |  10875.00 |
| MILLER |      10 | ACCOUNTING | 1300.00 |   8750.00 |
+--------+---------+------------+---------+-----------+
14 rows in set (0.00 sec)

    
    
    
    with t1 as (
    select e.deptno deptno_,d.dname dname_,sum(sal) total_sal
    from emp e
    join dept d on e.deptno=d.deptno
    group by e.deptno,d.dname
    )select e.ename,deptno_,dname_,e.sal,total_sal from emp e
    join t1 where deptno_ in (select deptno from emp);
    
    15. Display all managers and presidents along with number of (immediate) subbordinates.(SEE THIS)
    
select e.ename,e.job,count(f.empno)
from emp e
inner join emp f on f.mgr=e.empno
where e.job in("MANAGER","PRESIDENT")
group by e.ename,e.job;


+-------+-----------+----------------+
| ename | job       | count(f.empno) |
+-------+-----------+----------------+
| BLAKE | MANAGER   |              5 |
| KING  | PRESIDENT |              3 |
| JONES | MANAGER   |              2 |
| CLARK | MANAGER   |              1 |
+-------+-----------+----------------+


     

    
3. Execute following queries for books.csv dataset.
    1. Create table "books_staging" and load books.csv in it.
    
    create table books_staging(
    id int,
    name string,
    author string,
    subject string,
    price double
    
    )
    row format delimited
    fields terminated by ','
    stored as textfile;
    
    load data local inpath '/home/sharansh/Desktop/DBDA/BigData/data/books.csv'
    into table books_staging;
    
    2. Create table "books_orc" as transactional table.
    
    create table books_orc(
    id int,
    name string,
    author string,
    subject string,
    price double
    )
    stored as orc
    tblproperties('transactional'='true');
    
    insert into books_orc
    select * from books_staging;
    
    3. Create a materialized view for summary -- Subjectwise average book price.
    
    create materialized view mv_books as
    select subject,avg(price) 
    from books_orc 
    group by subject
    order by avg(price) desc;
    
+--------------------+--------------------+
|  mv_books.subject  |    mv_books._c1    |
+--------------------+--------------------+
| C Programming      | 242.20275          |
| C++ Programming    | 675.214            |
| Java Programming   | 519.67             |
| Operating Systems  | 447.3836666666666  |
+--------------------+--------------------+

    
    4. Display a report that shows subject and average price in descending order -- on materialized view.
    
select * from mv_books;

+--------------------+--------------------+
|  mv_books.subject  |    mv_books._c1    |
+--------------------+--------------------+
| C++ Programming    | 675.214            |
| Java Programming   | 519.67             |
| Operating Systems  | 447.3836666666666  |
| C Programming      | 242.20275          |
+--------------------+--------------------+

    5. Create a new file newbooks.csv.
        ```
        20,Atlas Shrugged,Ayn Rand,Novel,723.90
        21,The Fountainhead,Ayn Rand,Novel,923.80
        22,The Archer,Paulo Cohelo,Novel,623.94
        23,The Alchemist,Paulo Cohelo,Novel,634.80
        ```
on bash terminal
>       cat > newbooks.csv
        ```
        20,Atlas Shrugged,Ayn Rand,Novel,723.90
        21,The Fountainhead,Ayn Rand,Novel,923.80
        22,The Archer,Paulo Cohelo,Novel,623.94
        23,The Alchemist,Paulo Cohelo,Novel,634.80
        ```  

        
    6. Upload the file newbooks.csv into books_staging.
    
       load data local inpath '/home/sharansh/apache-hive-3.1.3-bin/newbooks.csv'
       into table books_staging;
    
    
    7. Insert "new" records from books_staging into books_orc.
    
       insert into books_orc
       select * from books_staging where subject='Novel';
    
    8. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new books visible in report?
       -> no it wont get updated as materialized view was created on previous table...... not on the updated table....so we need to update it.
       
    9. Rebuild the materialized view.
    
    alter materialized view mv_books rebuild;
    
    10. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new books visible in report?
    
    -> yes now the changes are visible are visible in the materialized view.

>select * from mv_books;    
+--------------------+--------------------+
|  mv_books.subject  |    mv_books._c1    |
+--------------------+--------------------+
| Novel              | 726.6099999999999  |
| C++ Programming    | 675.214            |
| Java Programming   | 519.67             |
| Operating Systems  | 447.3836666666666  |
| C Programming      | 242.20275          |
+--------------------+--------------------+

    
    11. Increase price of all Java books by 10% in books_orc.
    
    EARLIER PRICES
    
    +---------------+----------------------------+-------------------+--------------------+------------------+
| books_orc.id  |       books_orc.name       | books_orc.author  | books_orc.subject  | books_orc.price  |
+---------------+----------------------------+-------------------+--------------------+------------------+
| 3001          | Java Complete Reference    | Herbert Schildt   | Java Programming   | 525.121          |
| 3002          | Core Java Volume I         | Cay Horstmann     | Java Programming   | 575.651          |
| 3003          | Java Programming Language  | James Gosling     | Java Programming   | 458.238          |
+---------------+----------------------------+-------------------+--------------------+------------------+

    update books_orc set price=price+price*0.1 where subject="
    Java Programming"
    
    UPDATED PRICES
    
+---------------+----------------------------+-------------------+--------------------+------------------+
| books_orc.id  |       books_orc.name       | books_orc.author  | books_orc.subject  | books_orc.price  |
+---------------+----------------------------+-------------------+--------------------+------------------+
| 3001          | Java Complete Reference    | Herbert Schildt   | Java Programming   | 577.6331         |
| 3002          | Core Java Volume I         | Cay Horstmann     | Java Programming   | 633.2161         |
| 3003          | Java Programming Language  | James Gosling     | Java Programming   | 504.0618         |
+---------------+----------------------------+-------------------+--------------------+------------------+
    
    
    12. Rebuild the materialized view.

EARLIER   
+--------------------+--------------------+
|  mv_books.subject  |    mv_books._c1    |
+--------------------+--------------------+
| Novel              | 726.6099999999999  |
| C++ Programming    | 675.214            |
| Java Programming   | 519.67             |
| Operating Systems  | 447.3836666666666  |
| C Programming      | 242.20275          |
+--------------------+--------------------+

   
    alter materialized view mv_books rebuild;

NOW 

+--------------------+--------------------+
|  mv_books.subject  |    mv_books._c1    |
+--------------------+--------------------+
| Novel              | 726.6099999999999  |
| C++ Programming    | 675.214            |
| Java Programming   | 571.6370000000001  |
| Operating Systems  | 447.3836666666666  |
| C Programming      | 242.20275          |
+--------------------+--------------------+
        
    
    13. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new price changes visible in report?
    
    -> YES NOW NEW CHANGES ARE UPDATED ON THE MATERIALIZED VIEW
    
+--------------------+--------------------+
|  mv_books.subject  |    mv_books._c1    |
+--------------------+--------------------+
| Novel              | 726.6099999999999  |
| C++ Programming    | 675.214            |
| Java Programming   | 571.6370000000001  |
| Operating Systems  | 447.3836666666666  |
| C Programming      | 242.20275          |
+--------------------+--------------------+

    
    14. Delete all Java books.
    
    >delete from books_orc where subject ="Java Programming";
    
    15. Rebuild the materialized view.
    
    >alter materialized view mv_books rebuild;
    
    16. Display a report that shows subject and average price in descending order -- on materialized view. -- Are new price changes visible in report?
    
    >select * from mv_books ;
    
+--------------------+--------------------+
|  mv_books.subject  |    mv_books._c1    |
+--------------------+--------------------+
| Novel              | 726.6099999999999  |
| C++ Programming    | 675.214            |
| Operating Systems  | 447.3836666666666  |
| C Programming      | 242.20275          |
+--------------------+--------------------+

    

